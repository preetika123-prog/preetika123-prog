RANDOM FOREST CODE
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset

df = pd.read_csv('dataset2.csv')

# Remove the suffix from the "Days to harvest" column
df['Days to harvest'] = df['Days to harvest'].str.replace('- days to go', '')

# Convert the values in the "Days to harvest" column to floats
df['Days to harvest'] = pd.to_numeric(df['Days to harvest'], errors='coerce')

# Drop any rows with missing values
df.dropna(inplace=True)
# Remove any rows with missing values

df.dropna(inplace=True)

# Encode categorical variables
label_encoder = LabelEncoder()
df['Tomato Status'] = label_encoder.fit_transform(df['Tomato Status'])
df['Season'] = label_encoder.fit_transform(df['Season'])

# Split the dataset into training and testing sets

X = df.drop(['Days to harvest', 'Date'], axis=1)
y = df['Days to harvest']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = rf_model.predict(X_test)

# Calculate performance metrics

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("MSE:", mse)
print("R2:", r2)

# Create a new input for prediction
new_input = np.array([[90, 55, 20, 3, 1]])

# Make a prediction on the new input
prediction = rf_model.predict(new_input)

print("Days to Harvest:", prediction[0])
